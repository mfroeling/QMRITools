(* ::Package:: *)

(* ::Title:: *)
(*QMRITools RelaxometryTools*)


(* ::Subtitle:: *)
(*Written by: Martijn Froeling, PhD*)
(*m.froeling@gmail.com*)


(* ::Section:: *)
(*Begin Package*)


BeginPackage["QMRITools`RelaxometryTools`", Join[{"Developer`"}, Complement[QMRITools`$Contexts, {"QMRITools`RelaxometryTools`"}]]];


(* ::Section:: *)
(*Usage Notes*)


(* ::Subsection::Closed:: *)
(*Functions*)


T1rhoFit::usage = 
"T1rhoFit[data, EchoTimes] fits the T1rho value to the data using linear or nonlinear methods.

The output is in units as defined by the EchoTimes, e.g. if EchoTimes is in ms the output is in ms.

Output is {S(0), T1rhomap}."

T2Fit::usage = 
"T2Fit[data, EchoTimes] fits the t2 value to the data using linear or nonlinear methods.vThe output is in units as defined by the EchoTimes, e.g. if EchoTimes is in ms the output is in ms.vOutput is {S(0), t2}."

T1Fit::usage = 
"T1Fit[data, TR] fits the t1 value to the data using a nonlinear method. The output is in units as defined by the TR, e.g. if TR is in ms the TR is in ms. Output is {t1, apar, bpar}."

TriExponentialT2Fit::usage = 
"TriExponentialT2Fit[data, EchoTimes] fits the t2 based on Azzabou N et.al. Validation of a generic approach to muscle water t2 determination at 3T in fat-infiltrated skeletal muscle. J. Magn. Reson. 2015.
The fat t2 parameters are automatically estimated from the high signal voxels from the last echo.

The output is in units as defined by the EchoTimes, e.g. if EchoTimes is in ms the output is in ms.
The output fraction is between 0 an 1.

Output is {{S(0), fatFraction, muscleFraction, T2map},callibration} or {S(0), fatFraction, muscleFranction, T2map}."


EPGSignal::usage = 
"EPGSignal[{nEcho, echoSpace}, {t1, t2}, {ex_angle,ref_angle}, b1] generates a EPG t2 curve with stimulated echos. 
t1, t2 and echoSpace are in ms, angel is in degree, b1 is between 0 and 1.

Output is the EPG Signal vector.

EPGSignal[] is based on DOI: 10.1002/jmri.24619."

ShiftPulseProfile::usage = 
"ShiftPulseProfile[angs, shift] shifts the reference pulse profile by shift and makes the.
ans = {exitation, refocus} as generated by GetPulseProfile. Shift is the shift in sample points."

EPGT2Fit::usage = 
"EPGT2Fit[data, {nEcho, detlaTE}, {exitation, refoucs}] fits the t2 based on Marty B et.al. Simultaneous muscle water t2 and fat fraction mapping using transverse relaxometry with stimulated echo compensation.
Exitation and refocus are the RF pulse angles e.g. 90,180. They can also be a range of angeles over the slice profile as defined by GetSliceProfile.

The output is in units as defined by the detlaTE, e.g. if detlaTE is in ms the output is in ms.
The exitation and refocus are defined in Degrees.

Output is {{{T2map,B1Map},{wat, fat, fatMap}, residual},callibration} or {{T2map,B1Map},{wat, fat, fatMap}, residual}.

EPGT2Fit[] is based on DOI: 10.1002/nbm.3459."

CalibrateEPGT2Fit::usage = 
"CalibrateEPGT2Fit[datan, times, angle] calculates the Fat t2 ralaxation that will be used in the EPGT2fit.

Outputs the fat t2 value."

CreateT2Dictionary::usage = 
"CreateT2Dictionary[{T1m, T1f}, {nEcho, detlaTE}, angle] Creates a EPG signal dictionary used for EPGT2fit.
Every dictionary that is defined is cached.

The output is in units as defined by the detlaTE, e.g. if detlaTE is in ms the output is in ms.
The TR and TE should be in the same units as Dela.

Output is {dictionary, vals}."

NonLinearEPGFit::usage = 
"NonLinearEPGFit[{vals, T2cons}, y] performs dictionary minimization of data y. vals = {{T1muscle, T1fat, T2fat}, {nEcho, echoSpace, angle}}.

Output is {{t2, b1}, fwfraction, residualError}."

DictionaryMinSearch::usage = 
"DictionaryMinSearch[dictionary, y] performs dictionary minimization of data y. dictionary is generated with CreateT2Dictionary.

Output is {{t2, b1}, fwfraction, residualError}."


(* ::Subsection::Closed:: *)
(*General Options*)


EPGMethod::usage =
"EPGMethod is an optionf for EPGT2Fit. Values can be \"NLLS\", \"dictionary\" or \"dictionaryM\"."

EPGFitFat::usage = 
"EPGFitFat is an option for EPGT2Fit."

DictT2fValue::usage = 
"DictT2fValue is an option for EPGFit."

EPGRelaxPars::usage = 
"EPGRelaxPars is and option for EPGT2Fit. Needs to be {T1muscl, T1Fat, T2Fat} in ms, defaul is {1400,365,137} in ms."

EPGCalibrate::usage = 
"EPGCalibrate is an option for EPGT2Fit. If set to True it does autmatic callibration of the t2 fat relaxation time."

EPGSmoothB1::usage = 
"EPGSmoothB1 is an options for EPGT2Fit. If set to True the b1 map of the fit will be smoothed after which the minimization if perfomed again but with a fixed b1."

WaterFatShift::usage = 
"WaterFatShift is an options for EPGT2Fit. It specifies the amount of water fat shift in voxels."

WaterFatShiftDirection::usage = 
"WaterFatShiftDirection is an options for EPGT2Fit. It specifies the water fat shift direction: \"left\", \"right\", \"up\" and \"down\"."

EPGFatShift::usage = 
"EPGFatShift is an options for EPGT2Fit. Specifies the amount of shift of the fat refocusing pulse relative to the fat exitation pulse.
Can be obtained form GetPulseProfile."

DictT2IncludeWater::usage =
"DictT2IncludeWater is an options for EPGT2Fit."


OutputCalibration::usage = 
"OutputCalibration is an option for EPGT2Fit and TriExponentialT2Fit. If true it outputs the calibartion values."

DictT2Range::usage = 
"DictT2Range is an option for CreateT2Dictionary and EPGT2Fit. is specifies the range and step of the t2 values in the dictionary {min, max, step} in ms."

DictB1Range::usage = 
"DictB1Range is an option for CreateT2Dictionary and EPGT2Fit. It specifies the range and step of the b1 values in the dictionary {min, max, step}."

DictT2fRange::usage = 
"DictT2fRange is an option for CreateT2Dictionary and EPGT2Fit. is specifies the range and step of the t2 fat values in the dictionary {min, max, step} in ms. 
If a single value is given this fixed value is used a long as EPGCalibrate is False."

EPGFitPoints::usage = 
"EPGFitPoints is a option for CalibrateEPGT2Fit and EPGT2Fit. Number of points is 200 by default."

EPGMethodCal::usage = 
"EPGMethodCal is an option for CalibrateEPGT2Fit and EPGT2Fit. The calibration can be done using \"1comp\", \"2comp\", \"2compF\"."


(* ::Subsection:: *)
(*Error Messages*)


(* ::Section:: *)
(*Functions*)


Begin["`Private`"]


(* ::Subsection:: *)
(*Exponential Fitting*)


(* ::Subsubsection::Closed:: *)
(*T1rhoFit*)


Options[T1rhoFit] = {Method -> "Linear"};

SyntaxInformation[T1rhoFit]= {"ArgumentsPattern" -> {_, _, OptionsPattern[]}}

T1rhoFit[datan_, times_, OptionsPattern[]] := 
	Switch[OptionValue[Method],
	"Linear", LinFit[datan, times],
	_, LogFit[datan, times]
]


(* ::Subsubsection::Closed:: *)
(*T2Fit*)


Options[T2Fit] = {Method -> "Linear"};

SyntaxInformation[T2Fit]= {"ArgumentsPattern" -> {_, _, OptionsPattern[]}}

T2Fit[datan_, times_?MatrixQ,opts:OptionsPattern[]]:=Transpose[MapThread[T2Fit[#1,#2,opts]&,{datan,times}]];

T2Fit[datan_, times_?VectorQ, OptionsPattern[]] := Switch[OptionValue[Method],
	"Linear", LinFit[N[datan], times],
	_, LogFit[N[datan], times]
]


(* ::Subsubsection::Closed:: *)
(*LinFit*)


LinFit[datan_, times_] := Block[{datal, mat, r, s},
	(*put time dimension in first place*)
	datal = LogNoZero[N@Switch[ArrayDepth[datan], 4, Transpose[datan], _, datan]];
	(*make solution matrix*)
	mat = PseudoInverse[Transpose[{-times, 0 times + 1}]];
	(*solve system for all voxels*)
	{r, s} = mat . datal;
	(*constrain solutions*)
	{Clip[ExpNoZero[s], {0, 5 Max[datan]},{0.,0.}], Clip[DivideNoZero[1, r], {0, 50 Max[times]},{0, 50 Max[times]}]}
]


(* ::Subsubsection::Closed:: *)
(*LogFit*)


LogFit[datan_, times_] := Block[{result, fdat, offset, T1r, off, t1rho, t, ad, datal},
	ad = ArrayDepth[datan];
	datal = Switch[ad,
		3, Transpose[datan, {3, 1, 2}],
		4, Transpose[datan, {1, 4, 2, 3}]
	];

	result = ParallelMap[(
		fdat = Transpose[{times, #}];
		{off, t1rho} /. Quiet[NonlinearModelFit[
			fdat,
			{off Exp[-t/t1rho], 10 < t1rho < 301},
			{{off, Last@Last@fdat}, {t1rho, 100}},
			t
		]["BestFitParameters"]]
	) &, datal, {ad - 1}];

	{offset, T1r} = Switch[ad,
		3, Transpose[result, {2, 3, 1}],
		4, Transpose[result, {2, 3, 4, 1}]
	];

	T1r = Clip[T1r, {0, 500}, {0, 500}];
	{offset, T1r}
]


(* ::Subsubsection::Closed:: *)
(*T1Fit*)


SyntaxInformation[T1Fit]= {"ArgumentsPattern" -> {_, _,_.}}

T1Fit[fdat_?VectorQ, time_?VectorQ] := T1LinFit[fdat, time,Automatic]

T1Fit[datan_?ArrayQ, timei_?VectorQ]:=T1Fit[datan, timei, Automatic]

T1Fit[datan_, timei_,met_] := Block[{ad, datal, dim, times, dat, time, result, t1out, t1outs, aparo, bparo},
	ad = ArrayDepth[datan];
	datal = Switch[ad, 3, {Transpose[datan, {3, 1, 2}]}, 4, Transpose[datan, {1, 4, 2, 3}]];
	dim = Dimensions[datal];
	times = If[Length[timei] === dim[[-1]], ConstantArray[timei, dim[[1]]], timei];

	DistributeDefinitions[T1LinFit];

	result = MapThread[(
		dat = #1;
		time = #2;
		DistributeDefinitions[time];
		Quiet@ParallelMap[T1LinFit[#, time, met] &, dat, {2}]
	) &, {datal, times}, 1];

	(*constrain the output to fixed values*)
	{t1out, t1outs, aparo, bparo} = RotateDimensionsRight[result];
	t1out = Clip[Round[t1out, .0001], {0, 3000}, {0, 3000}];
	t1outs = Clip[Round[t1outs, .0001], {0, 3000}, {0, 3000}];

	(*output the data*)
	{t1out, t1outs, aparo, bparo}
]


T1LinFit[fdat_?VectorQ, time_?VectorQ, met_] := Block[{min, max, sol, aparf, bparf, tt, t1sf, t1s, apar, bpar, cor},
	{min, max} = MinMax[fdat];

	If[Total[fdat] == 0.,
		{0., 0., 0., 0.},
		(*calculate t1 star (look locker assuptions)*)
		Switch[met,
			Automatic,
			ti = If[min<0.5 max, time[[First@First@Position[fdat, Min[fdat]]]],First@time];
			sol = Quiet[FindFit[Transpose[{time, fdat}], {
				(*model*)
				Abs[aparf - bparf Exp[-tt/t1sf]],
				(*constraints*)
				{0 < aparf, 1.8 aparf < bparf < 2.2 aparf, 0 < t1sf < 3000}
				},
				(*initial values*)
				{{aparf, Last@fdat}, {bparf, 2 (Last@fdat + First@fdat)}, {t1sf, 1.5 ti}}, tt]
			];
			,
			"NMinimize",
			sol = Quiet[FindFit[Transpose[{time, fdat}], {
				(*model*)
				Abs[aparf - bparf Exp[-tt/t1sf]],
				(*constraints*)
				{0 < aparf < bparf < 2 max, 0 < t1sf < 3000}
				},
				(*initial values*)
				{aparf, bparf, t1sf}, tt]
			];
		];

		(*get the fit results*)
		{t1s, apar, bpar} = {t1sf, aparf, bparf} /. sol;

		(*correct the t1 star an convert to t1*)
		If[apar > 0, 
			cor = Clip[(bpar/apar - 1), {0.5, 1.5}, {0.5, 1.5}];
			{cor t1s, t1s, apar, bpar}, 
			{0., 0., 0., 0.}
		]
	]
]


(* ::Subsection::Closed:: *)
(*TriExponentialT2Fit*)


Options[TriExponentialT2Fit]={OutputCalibration->False}

SyntaxInformation[TriExponentialT2Fit]= {"ArgumentsPattern" -> {_, _, OptionsPattern[]}}

TriExponentialT2Fit[datan_, times_, OptionsPattern[]] := Block[{
		result, fdat, offset, T1r, off, t1rho, t, ad, datal, model, cs, cf, 
		T2s, t2f, Af, Am, t2m, x, Aff, Amm, T2mf, s0, ffr, mfr, t2, model2,cal,
		maskT2, dataT2, fmask, fitData, Afi, Ami, csi, T2mi, T2fi, T2si, sci
	},

	ad = ArrayDepth[datan];

	Switch[ad,
		3,(*single slice*)
		(*make mask an normalize data to first echo*)
		maskT2 = Mask[Mean[datan], 2, MaskSmoothing ->True, MaskComponents -> 2, MaskClosing -> 1];
		dataT2 = MaskData[datan, maskT2];
		dataT2 = dataT2/MeanNoZero[Flatten[dataT2]];
		(*create mask selecting fat*)
		fmask = Mask[dataT2[[-1]], 0.5];
		fmask = ImageData[SelectComponents[Image[fmask], "Count", -2]];
		(*data for calibration fit*)
		fitData = Transpose[{times, Mean[Flatten[GetMaskData[#, fmask]]] & /@ dataT2}];
		datal = Transpose[dataT2, {3, 1, 2}],
		4,(*mulit slice*)
		dataT2 = NormalizeData[datan];
		(*make mask an normalize data to first echo*)
		maskT2 = Mask[NormalizeMeanData[dataT2], 2, MaskSmoothing->True, MaskComponents -> 2, MaskClosing -> 1]; 
		dataT2 = MaskData[dataT2, maskT2];
		(*create mask selecting fat*)
		fmask = Mask[dataT2[[All, -1]], 25];
		fmask = ImageData[SelectComponents[Image3D[fmask], "Count", -2]];
		(*data for calibration fit*)
		fitData = Transpose[{times, Mean[Flatten[GetMaskData[#, fmask]]] & /@ Transpose[dataT2]}];
		datal = Transpose[dataT2, {1, 4, 2, 3}]
	];

	model = Af *(cs*Exp[-x/T2s] + (1 - cs)*Exp[-x/t2f]) + Am * Exp[-x/t2m];

	(*perform callibration fit*)
	{Afi, Ami, csi, T2mi, T2fi, T2si} = {Af, Am, cs, t2m, t2f, T2s} /. 
	FindFit[fitData, {model, 
		{0.1 <= cs <= 0.9, 20 < t2m < 50, t2m < t2f, t2f < T2s, 0 <= Am, Am < Af}},
		{{Af, 1 fitData[[1, 2]]}, {Am, 0.25 fitData[[1, 2]]},{cs, 0.33}, {t2m, 35}, {t2f, 81}, {T2s, 250}}, 
		x, Method -> "NMinimize"];
	(*normalize signal fractions*)  	
	sci = Afi + Ami;
	{Afi, Ami} = {Afi, Ami}/sci;
	cal = Round[{sci, {100 Ami, T2mi}, {100 csi, T2si, T2fi}}, .1];

	(*Print the callibration results*)
	Print[Row[{
		Column[Row /@ {
			{"signal: ", Round[sci, .1]},
			{"f mus: ", Round[100 Ami, .1] , " - t2 mus: ", 
			Round[T2mi, .1] },
			{""},
			{"f fat-slow: ", Round[100 csi, .1]}, 
			{" t2 slow: ", Round[T2si, .1], " - t2 fast: ", Round[T2fi, .1]}
			}, Alignment -> Center], 
		Show[
			ListLinePlot[fitData, PlotStyle -> Directive[Thick, Red], PlotRange -> {{0, 150}, {0, sci}}, ImageSize -> 150], 
			Plot[sci model /. Thread[{Af, Am, cs, t2m, t2f, T2s} -> {Afi, Ami, csi, T2mi, T2fi, T2si}], {x, 0, 200}, PlotStyle -> Directive[{Black, Dashed}]]
			]
	}, "   "]];

	(*define the fat values in the model*)
	model2 = Af *(csi*Exp[-x/T2si] + (1 - csi)*Exp[-x/T2fi]) + Am * Exp[-x/t2m];
	DistributeDefinitions[model2];

	(*perform the per voxel fit*)
	result = ParallelMap[(
		If[N@Total[#] === 0.,
		{0., 0., 0., 0.},

		(*fit the muscle t2*)
		fdat = Transpose[{times, #}];
		{Aff, Amm, T2mf} = {Af, Am, t2m} /. Quiet[FindFit[fdat, model2, {{Af, 0.125 fdat[[1, 2]]}, {Am, 1.125 fdat[[1, 2]]}, {t2m, 35}}, x]];

		s0 = Aff + Amm;
		{Aff, Amm} = {Aff, Amm}/s0;
		{s0, Aff, Amm, T2mf}

		]) &, datal, {ad - 1}];

	(*generate output*)
	{s0, ffr, mfr, t2} = Switch[ad, 
	3, Transpose[result, {2, 3, 1}], 
	4, Transpose[result, {2, 3, 4, 1}]];

	t2 = Clip[t2, {0, 500}, {0, 500}];
	s0 = Clip[s0, {Min[datan], 1.5 Max[datan]}, {0, 0}];
	mfr = Clip[mfr, {0, 1}, {0, 1}];
	ffr = Clip[ffr, {0, 1}, {0, 1}];

	(*in needed also output the calibration values*)
	If[OptionValue[OutputCalibration],{N@{s0, ffr, mfr, t2},cal},N@{s0, ffr, mfr, t2}]
	]


(* ::Subsection:: *)
(*EPGSignal*)


(* ::Subsubsection::Closed:: *)
(*EPGSignal*)


Options[EPGSignal] = Options[EPGSignali] = {
	EPGOutput->"Magnitude"
}

SyntaxInformation[EPGSignal] = {"ArgumentsPattern" -> {_, _, _, _, _., OptionsPattern[]}};

EPGSignal[{nEchoi_, echoSpace_}, {t1_, t2_}, {ex_, ref_}, b1_, opts:OptionsPattern[]] := EPGSignali[{nEchoi, echoSpace}, {t1, t2}, {ex, ref}, b1, {0., 0.}, opts]

EPGSignal[{nEchoi_, echoSpace_}, {t1_, t2_}, {ex_, ref_}, b1_, fp_, opts:OptionsPattern[]] := EPGSignali[{nEchoi, echoSpace}, {t1, t2}, {ex, ref}, b1, fp, opts]

EPGSignali[{nEchoi_, echoSpace_}, {t1_, t2_}, {ex_, ref_}, b1_, opts:OptionsPattern[]] :=EPGSignali[{nEchoi, echoSpace}, {t1, t2}, {ex, ref}, b1, {0., 0.}, opts] 

EPGSignali[{nEchoi_, echoSpace_}, {t1_, t2_}, {ex_?ListQ, ref_?ListQ}, b1_, fp_, opts:OptionsPattern[]] := Block[{sig},
	sig = Map[EPGSignali[{nEchoi, echoSpace}, {t1, t2}, #, b1, fp, opts] &, Transpose[{ex, ref}]];
	sig = Mean@Join[sig, sig[[2 ;;]]]
]

EPGSignali[{nEcho_, echoSpace_}, {t1_, t2_}, {exi_, refi_}, b1_, fp_, OptionsPattern[]] := Block[{
		tau, T0, R0, ex, ref, Smat, Tmat, Rmat, Rvec, svec, t2r, t1r, t2r1, t2r2, states, w, funRot, funMove,
		freq, phase, pex, pref, sig
	},

	(*define internal paramters*)
	states = Round[If[nEcho >= 20, Max[{nEcho/2, 20}], nEcho]];

	(*convert to Rad*)
	ex = N[b1 exi Degree];
	ref = N[b1 refi Degree];
	tau = echoSpace/2.;

	(*if use off ressonance then use complex matrix*)
	{freq, phase} = N@If[NumberQ[fp], {fp, 0.}, fp];
	w = -tau/1000. 2. Pi freq;
	{pex, pref} = If[NumberQ[phase], {0., phase Degree}, {0., 0.}];
	{funRot, funMove} = If[pref =!= 0. || w =!= 0., 
		{RotMatrixTI, MoveStatesI}, {RotMatrixT, MoveStates}
	];

	(*define relaxation*)
	t1r = Exp[-tau/t1];
	If[w =!= 0.,
		t2r1 = Exp[-tau/t2 - w I];
		t2r2 = Exp[-tau/t2 + w I];
		,
		t2r1 = t2r2 = Exp[-tau/t2];
	];

	(*Selection matrix to move all traverse states up one coherence Level*)
	Smat = MixMatrix[states];
	svec = Rvec = ConstantArray[0., Length[Smat]];

	(*Relaxation matrix*)
	Rmat = MakeDiagMat[DiagonalMatrix[{t2r1, t2r2, t1r}], states];
	Rvec[[3]] = (1. - t1r);

	(*RF mixing matrix*)
	Tmat = MakeDiagMat[funRot[ref, pref], states];

	(*Create Initial state*)
	svec[[1 ;; 3]] = funRot[ex, pex].{0., 0., 1.};

	(*combined relax and gradient and create output*)
	sig = funMove[Rmat, Rvec, Smat, Tmat, svec, Round@nEcho][[2 ;;, 1]];

	Switch[OptionValue[EPGOutput],
		"Complex", sig,
		"Real"|"Re", Re[sig],
		"Imaginary"|"Im", Im[sig],
		"ReIm", Transpose[ReIm[sig]],
		"Phase", Arg[sig],
		_, Abs[sig]
	]
]


(* ::Subsubsection::Closed:: *)
(*MakeDiagMat*)


MakeDiagMat[mat_, nEcho_] := ArrayFlatten[IdentityMatrix[nEcho] ConstantArray[mat, {nEcho, nEcho}]]


(* ::Subsubsection::Closed:: *)
(*MixMatrix*)


(*if run once with nEcho definition is stored*)
MixMatrix[nEcho_] := MixMatrix[nEcho] = Block[{len, Smat, vec, off1, off2},
	(*mixing matirx*)
	len = 3*(nEcho);
	Smat = ConstantArray[0, {len, len}];
	(*define state transitions*)
	Smat[[1, 5]] = 1;(*yi-1\[Rule]xi*)
	Smat[[len, len]] = 1;(*zn*)
	Table[
		Smat[[o - 1, o + 2]] = 1;(*yi\[Rule]yi-1*)
		Smat[[o + 1, o - 2]] = 1;(*xi\[Rule]xi+1*)
		Smat[[o, o]] = 1;(*zi\[Rule]zi*)
	,{o, 3, len - 3, 3}];
	Smat
]


(* ::Subsubsection::Closed:: *)
(*RotMatrixT*)


RotMatrixT[alpha_, ___] := RotMatrixTC[alpha];

(*using CPMG condition*)
RotMatrixTC = Compile[{{alpha, _Real, 0}}, Chop[{
	{Cos[alpha/2]^2, Sin[alpha/2]^2, Sin[alpha]},
	{Sin[alpha/2]^2, Cos[alpha/2]^2, -Sin[alpha]},
	{-0.5 Sin[alpha], 0.5 Sin[alpha], Cos[alpha]}
}], RuntimeOptions -> "Speed"];

RotMatrixTI[alpha_, phi_] := RotMatrixTCI[alpha, phi];

(*Specify angle and phase*)
RotMatrixTCI = Compile[{{alpha, _Real, 0}, {phi, _Real, 0}}, Chop[{
	{Cos[alpha/2]^2, Exp [2 phi I] Sin[alpha/2]^2, -I Exp [phi I] Sin[alpha]},
	{Exp [-2 phi I] Sin[alpha/2]^2, Cos[alpha/2]^2, I Exp [-phi I] Sin[alpha]},
	{-0.5 I Exp [-phi I] Sin[alpha], 0.5 I Exp [phi I] Sin[alpha], Cos[alpha]}
}], RuntimeOptions -> "Speed"];


(* ::Subsubsection::Closed:: *)
(*MoveStates*)


MoveStates = Compile[{{Rmat, _Real, 2}, {Rvec, _Real, 1}, {Smat, _Real, 2}, {Tmat, _Real, 2}, {svec, _Real, 1}, {nEcho, _Integer, 0}}, 
	(*Rmat = relaxation; Rvec = Mz recovery; Tmat = Rf pulse;*)
	(*1. Relaxation - 2. Mz-rec - 3. Change states - 4. RF pulse - 5. Relaxation - 6. Mz-rec - 7. Change states*)
	NestList[Chop[Smat.(Rmat.(Tmat.(Smat.((Rmat.#) + Rvec))) + Rvec)] &, svec, nEcho]
, RuntimeOptions -> "Speed"];

MoveStatesI = Compile[{{Rmat, _Complex, 2}, {Rvec, _Complex, 1}, {Smat, _Integer, 2}, {Tmat, _Complex, 2}, {svec, _Complex, 1}, {nEcho, _Integer, 0}},
	(*Rmat = relaxation; Rvec = Mz recovery; Tmat = Rf pulse;*)
	(*1. Relaxation - 2. Mz-rec - 3. Change states - 4. RF pulse - 5. Relaxation - 6. Mz-rec - 7. Change states*)
	NestList[Chop[Smat.(Rmat.(Tmat.(Smat.((Rmat.#) + Rvec))) + Rvec)] &, svec, nEcho]
, RuntimeOptions -> "Speed"];


(* ::Subsection:: *)
(*EPGT2Fit*)


(* ::Subsubsection::Closed:: *)
(*ShiftPulseProfile*)


ShiftPulseProfile[angs_, shift_] := Block[{exi, refi, cors, func, refo},
	{exi, refi} = Join[Reverse[#], #[[2 ;;]]] & /@ angs;
	cors = Range[1, Length[refi]];
	func = Interpolation[Transpose[{cors, refi}], InterpolationOrder -> 3, 
		"ExtrapolationHandler" -> {(0.) &, "WarningMessage" -> False}];
	refo = func[cors - shift];
	{{exi, refi}, {exi, refo}}
]


(* ::Subsubsection::Closed:: *)
(*ErrorFunctions*)


(*one compartment fat only*)
ErrorFunc1F[y_, t2f_Real, b1_Real, s0_, vals_] :=  Quiet@Block[{sig, T1m, T1f, echo, angle},   
	{echo, T1f, angle} = vals;
	Total[(y - s0 EPGSignali[echo, {T1f, t2f}, angle, b1])^2]]

(*Two compartment, fit fat, fix muscle*)
ErrorFunc2F[y_, t2f_Real, b1_Real, vals_] := Quiet@Block[{sig, T1m, t2m, T1f, echo, angle},
	{echo, {T1m, t2m, T1f}, angle} = vals;
	sig = Transpose[{
		EPGSignali[echo, {T1m, t2m}, angle, b1],
		EPGSignali[echo, {T1f, t2f}, angle, b1]
		}];
	LeastSquaresErrorC[sig, y]]

(*Two compartment, fit fat, fix muscle, shifted fat frofile*)
ErrorFunc2FS[y_, t2f_Real, b1_Real, vals_] := Quiet@Block[{sig, T1m, t2m, T1f, echo, angle, angleS},
	{echo, {T1m, t2m, T1f}, angle, angleS} = vals;
	sig = Transpose[{
		EPGSignali[echo, {T1m, t2m}, angle, b1],
		EPGSignali[echo, {T1f, t2f}, angleS, b1]
		}];
	LeastSquaresErrorC[sig, y]]

(*Two compartment, fit muscle, fix fat*)
ErrorFunc2M[y_, t2m_Real, b1_Real, vals_] := Quiet@Block[{sig, T1m, T1f, t2f, echo, angle},
	{echo, {T1m, T1f, t2f}, angle} = vals;
	sig = Transpose[{
		Abs[EPGSignali[echo, {T1m, t2m}, angle, b1]],
		Abs[EPGSignali[echo, {T1f, t2f}, angle, b1]]
		}];
	LeastSquaresErrorC[sig, y]]

(*Two compartment, fit muscle and fat*)
ErrorFunc2MF[y_, t2m_Real, t2f_Real, b1_Real, vals_] := Quiet@Block[{sig, T1m, T1f, echo, angle},
	{echo, {T1m, T1f}, angle} = vals;
	sig = Transpose[{
		EPGSignali[echo, {T1m, t2m}, angle, b1],
		EPGSignali[echo, {T1f, t2f}, angle, b1]
		}];
	LeastSquaresErrorC[sig, y]]

(*Two compartment, fit muscle and fat, shifted fat profile*)
ErrorFunc2MFS[y_, t2m_Real, t2f_Real, b1_Real, vals_] := Quiet@Block[{sig, T1m, T1f, echo, angle, angleS},
	{echo, {T1m, T1f}, angle, angleS} = vals;
	sig = Transpose[{
		EPGSignali[echo, {T1m, t2m}, angle, b1],
		EPGSignali[echo, {T1f, t2f}, angleS, b1]
		}];
	LeastSquaresErrorC[sig, y]]


(* ::Subsubsection::Closed:: *)
(*LeastSquaresC*)


(*calculate the pseudoinverse Ai*)
PseudoInverseC = Compile[{{A, _Real, 2}}, Block[{T = Transpose[A]}, (Inverse[T.A].T)], 
	RuntimeAttributes -> {Listable}, RuntimeOptions -> "Speed"];

PseudoInverseWC = Compile[{{A, _Real, 2}, {W, _Real, 2}}, Block[{T = Transpose[A]}, (Inverse[T.W.A].T.W)], 
	RuntimeAttributes -> {Listable}, RuntimeOptions -> "Speed"];

LeastSquaresC = Compile[{{A, _Real, 2}, {y, _Real, 1}}, Block[{T = Transpose[A]}, (Inverse[T.A].T).y], 
	RuntimeAttributes -> {Listable}, RuntimeOptions -> "Speed"];

(*Ai is Inverse[T.A].T*)   
LeastSquares2C = Compile[{{Ai, _Real, 2}, {y, _Real, 1}},  Ai.y, 
	RuntimeAttributes -> {Listable}, RuntimeOptions -> "Speed"];

(*f is Ai.y*)
ErrorC = Compile[{{y, _Real, 1}, {f, _Real, 1}, {A, _Real, 2}}, Total[((y - A.f))^2], 
	RuntimeAttributes -> {Listable}, RuntimeOptions -> "Speed"];

ErrorCS = Compile[{{y, _Real, 1}, {f, _Real, 1}, {A, _Real, 2}}, Sqrt[Mean[((y - A.f))^2]], 
	RuntimeAttributes -> {Listable}, RuntimeOptions -> "Speed"];

LeastSquaresErrorC = Compile[{{A, _Real, 2}, {y, _Real, 1}}, Block[{T = Transpose[A]}, 
	Total[(y - A.(Inverse[T.A].T).y)^2]], 
	RuntimeAttributes -> {Listable}, RuntimeOptions -> "Speed"];

LeastSquaresErrorCS = Compile[{{A, _Real, 2}, {y, _Real, 1}}, Block[{T = Transpose[A]}, 
	Sqrt[Mean[(y - A.(Inverse[T.A].T).y)^2]]], 
	RuntimeAttributes -> {Listable}, RuntimeOptions -> "Speed"];

(*Ai is Inverse[T.A].T*)	
LeastSquaresError2C = Compile[{{A, _Real, 2}, {Ai, _Real, 2}, {y, _Real, 1}}, Total[(y - A.Ai.y)^2], 
	RuntimeAttributes -> {Listable}, RuntimeOptions -> "Speed"];

LeastSquaresError2CS = Compile[{{A, _Real, 2}, {Ai, _Real, 2}, {y, _Real, 1}}, Sqrt[Mean[(y - A.Ai.y)^2]], 
	RuntimeAttributes -> {Listable}, RuntimeOptions -> "Speed"];


(* ::Subsubsection::Closed:: *)
(*NonLinearEPGFit*)


SyntaxInformation[NonLinearEPGFit]= {"ArgumentsPattern" -> {_, _}}

NonLinearEPGFit[{valsf_, cons_}, yi_] := NonLinearEPGFiti[{valsf, cons}, N[yi]]

NonLinearEPGFiti[{_,_}, {0. ..}] = {0., 0., 0., 0., 0.};

NonLinearEPGFiti[{valsf_, cons_}, ydat_] := Block[{fwf, residualError, soli, T1m, T1f, t2f, echo, angle, T2s, B1s},
	(*perform the fit*)
	{residualError, soli} = Quiet@FindMinimum[{
			ErrorFunc2M[ydat, T2i, B1i, valsf],
		{0.4 <= B1i, B1i <= 1.6, cons[[1]] <= T2i, T2i <= cons[[2]]}
		}, {{T2i, 35}, {B1i, 0.9}},
		AccuracyGoal -> 5, PrecisionGoal -> 5, MaxIterations -> 25];
		{T2s, B1s} = soli[[All, 2]];

	(*get corresponding fat fractions*)
	{echo, {T1m, T1f, t2f}, angle} = valsf;
	fwf = LeastSquaresC[Transpose[{
		EPGSignali[echo, {T1m, T2s}, angle, B1s],
		EPGSignali[echo, {T1f, t2f}, angle, B1s]
	}], ydat];

	(*export paramters*)
	Flatten[{{T2s, B1s}, fwf, residualError}]
]


(* ::Subsubsection::Closed:: *)
(*DictionaryMinSearch*)


SyntaxInformation[DictionaryMinSearch]= {"ArgumentsPattern" -> {_, _, _.}}

dicmet = {"NelderMead", "PostProcess" -> True, "ExpandRatio" -> 2, "ShrinkRatio" -> .75, "ReflectRatio" -> 0.75, "ContractRatio" -> .75, "RandomSeed" -> 5};

(*brute force dictionary min search*)
(*usging a normal dictionary*)
DictionaryMinSearch[{dictf_, valsf_}, ydat_] := DictionaryMinSearchi[{dictf, valsf}, ydat]

DictionaryMinSearchi[{_, valsf_}, {0. ..}] := Join[0. valsf[[1]], {0., 0., 0.}]

DictionaryMinSearchi[{dictf_, valsf_}, ydat_] := Block[{fwf, residualError, sol},
	(*calcualte dictionary error*)
	fwf = LeastSquaresC[dictf, ydat];
	residualError = ErrorC[ydat, fwf, dictf];
	sol = First@Ordering[residualError, 1];
	(*find Min value*)
	Flatten[{valsf, fwf, residualError}[[All, sol]]]
]

(*brute force dictionary min search*)
(*usging a the pseudo inverse dictionary*)
DictionaryMinSearch[{dictf_, dictfMat_, valsf_}, ydat_] := DictionaryMinSearchi[{dictf, dictfMat, valsf}, ydat]

DictionaryMinSearchi[{_, _, valsf_}, {0. ..}] := Join[0. valsf[[1]], {0., 0., 0.}]

DictionaryMinSearchi[{dictf_, dictfMat_, valsf_}, ydat_] := Block[{fwf, residualError, sol},
	(*calcualte dictionary error*)
	fwf = LeastSquares2C[dictfMat, ydat];
	residualError = ErrorC[ydat, fwf, dictf];
	sol = First@Ordering[residualError, 1];
	(*find Min value*)
	Flatten[{valsf, fwf, residualError}[[All, sol]]]
]


(*minimization dictionary min search*)
(*Fit without the predefined pseudo inverse*)
DictionaryMinSearch[{dict_, vals_}, ydat_, cons_] := DictionaryMinSearchi[{dict, vals}, ydat, cons]

(*if background return zeors*)
DictionaryMinSearchi[{_, _}, {0. ..}, {_, _, _}] = {0., 0., 0., 0., 0., 0.}

DictionaryMinSearchi[{_, _}, {0. ..}, {_, _}] = {0., 0., 0., 0., 0.}

(*2D dictionary*)
DictionaryMinSearchi[{dict_, vals_}, ydat_, {maxx_,maxy_}] := Block[{err, coor, ErrorFuncDic},

	(*define the cost function*)
	ErrorFuncDic[sig_, {x_Integer, y_Integer}] := LeastSquaresErrorC[dict[[x, y]], sig];
	(*minimize the dictionary value*)
	{err, coor} = Quiet@NMinimize[
		{ErrorFuncDic[ydat, {x, y}], 1 <= x <= maxx && 1 <= y <= maxy}, {x, y}, Integers, 
		Method -> "NelderMead"(*dictmet*)];
	(*find the min vals*)
	Flatten[{vals[[##]], LeastSquaresC[dict[[##]], ydat], err}] & @@ coor[[All, 2]]
	]

(*3D dictionary*)
DictionaryMinSearchi[{dict_, vals_}, ydat_, {maxx_, maxy_, maxz_}] := Block[{err, coor, ErrorFuncDic},
	(*define the cost function*)
	ErrorFuncDic[sig_, {x_Integer, y_Integer, z_Integer}] := LeastSquaresErrorC[dict[[x, y, z]], sig];
	(*minimize the dictionary value*)
	{err, coor} = Quiet@NMinimize[
		{ErrorFuncDic[ydat, {x, y, z}], 1 <= x <= maxx && 1 <= y <= maxy && 1 <= z <= maxz}, {x, y, z}, Integers,
		Method -> "NelderMead"(*dictmet*)];
	(*find the min vals*)
	Flatten[{vals[[##]], LeastSquaresC[dict[[##]], ydat], err}] & @@ coor[[All, 2]]
]


(*minimization dictionary min search*)
(*usging a the pseudo inverse dictionary*)  
DictionaryMinSearch[{dict_, dictMat_, vals_}, ydat_, cons_] := DictionaryMinSearchi[{dict, dictMat, vals}, ydat, cons]

(*if background return zeors*)
DictionaryMinSearchi[{_, _, _}, {0. ..}, {_, _, _}] = {0., 0., 0., 0., 0., 0.}

DictionaryMinSearchi[{_, _, _}, {0. ..}, {_, _}] = {0., 0., 0., 0., 0.}

(*2D dictionary*)
DictionaryMinSearchi[{dict_, dictMat_, vals_}, ydat_, {maxx_,maxy_}] := Block[{err, coor, ErrorFuncDic},
	(*define the cost function*)
	ErrorFuncDic[sig_, {x_Integer, y_Integer}] := LeastSquaresError2C[dict[[x, y]], dictMat[[x, y]], sig];
	(*minimize the dictionary value*)
	{err, coor} = Quiet@NMinimize[
		{ErrorFuncDic[ydat, {x, y}], 1 <= x <= maxx && 1 <= y <= maxy}, {x, y}, Integers,
		(*Method -> "NelderMead"*) 
		Method -> Append[dicmet, "InitialPoints" -> Round[0.5 {maxx, maxy}]]
		];
	(*find the min vals*)
	Flatten[{vals[[##]], LeastSquaresC[dict[[##]], ydat], err}] & @@ coor[[All, 2]]
	]

(*3D dictionary*)
DictionaryMinSearchi[{dict_, dictMat_, vals_}, ydat_, {maxx_, maxy_, maxz_}] := Block[{err, coor, ErrorFuncDic},
	(*define the cost function*)
	ErrorFuncDic[sig_, {x_Integer, y_Integer, z_Integer}] := LeastSquaresError2C[dict[[x, y, z]], dictMat[[x, y, z]], sig];
	(*minimize the dictionary value*)
		{err, coor} = Quiet@NMinimize[
			{ErrorFuncDic[ydat, {x, y, z}], 1 <= x <= maxx && 1 <= y <= maxy && 1 <= z <= maxz}, {x, y, z}, Integers,
			(*Method -> "NelderMead"*)
			Method -> Append[dicmet, "InitialPoints" -> Round[{0.25, 0.75, 0.5} {maxx, maxy, maxz}]]
			];
	(*find the min vals*)
	Flatten[{vals[[##]], LeastSquaresC[dict[[##]], ydat], err}] & @@ coor[[All, 2]]
]


(* ::Subsubsection::Closed:: *)
(*EPGT2Fit*)


Options[EPGT2Fit]= {
	EPGRelaxPars -> {1400., 365.},
	DictB1Range -> {0.5, 1.4, 0.02}, 
	DictT2Range -> {15., 45., 0.2}, 

	EPGFitFat -> True,
	EPGCalibrate -> False,
	DictT2fRange -> {120, 190., 2.5}, 
	DictT2fValue -> 150.,

	EPGFitPoints -> 50, 
	EPGMethod -> "dictionary", 
	MonitorCalc -> True, 
	OutputCalibration -> False, 
	EPGSmoothB1 -> True,

	WaterFatShift -> 0.,
	WaterFatShiftDirection -> "left",

	EPGFatShift -> 0.,
	DictT2IncludeWater -> False,
	EPGMethodCal -> "2compF", 
	EPGRefocussingPhase -> 0.
}

SyntaxInformation[EPGT2Fit]= {"ArgumentsPattern" -> {_, _, _, OptionsPattern[]}}

EPGT2Fit[datan_, echoi_, angle_, OptionsPattern[]]:=Block[{
		mon, echo, T1m, T1f, t2f, ad, datal, sol, wat, fat, fatMap, T2map, B1Map, clip, fatc,
		B1i, T2i, T2s, B1s, soli, error, dictf, valsf, ydat, fwf, residualError, T2mc, B1c, cal,
		ran,dict,vals,cons,start, b1ran, b1step, t2ran, t2step, points, dim, size,
		b1rule, B1Int, dataf, b1, b1vals, b1len, t2rule, t2Int, t2, t2vals, t2len,
		sig, dictMat, dictfMat, t2fran, S0c, met, val, out, T2fmap, wMat, fval, t2fval,
		clipf, t2fdic, t2fpos, dictMatW, inp, consi, vals2, inpf, inp2, smoothing, optDic,
		shift, B1mask
	},

	mon = OptionValue[MonitorCalc];

	(*Get Input*)
	echo = If[Length[echoi]===2, echoi, {Length[echoi], First[echoi]}];
	ad = ArrayDepth[datan];
	datal = N@Switch[ad, 1, datan, 3, RotateDimensionsLeft@datan, 4, RotateDimensionsLeft@Transpose[datan]];

	(*Get Options*)
	{T1m, T1f} = N@OptionValue[EPGRelaxPars];
	t2ran = N[OptionValue[DictT2Range]];
	clip = t2ran[[1 ;; 2]];
	b1ran = N[OptionValue[DictB1Range]];
	t2fran = N[OptionValue[DictT2fRange]];
	clipf = t2fran[[1 ;; 2]];
	t2fval = N[OptionValue[DictT2fValue]];

	(*clibrate the fat signal from the real data*)
	If[OptionValue[EPGCalibrate]&&!VectorQ[datan],
		If[mon, Print["Callibrating EPG fat t2 using: ", OptionValue[EPGMethodCal]]];
		cal = CalibrateEPGT2Fit[datan, echo, angle, EPGRelaxPars -> {clip, clipf, {T1m, T1f}}, 
		EPGFitPoints -> OptionValue[EPGFitPoints], EPGFatShift->OptionValue[EPGFatShift], 
		EPGMethodCal -> OptionValue[EPGMethodCal]];

		Switch[OptionValue[EPGMethodCal],
			"1comp", {t2fval, B1c, S0c} = cal[[1]];,
			"2comp", {T2mc, t2fval, B1c} = cal[[1]];,
			"2compF", {t2fval, B1c} = cal[[1]]
		];

		(*make whole 5 ms such that it is more likely for same values, needs less libraries, round up higher is better then lower*)
		t2fval = N@Ceiling[t2fval,5];
		If[mon, Print["EPG fat callibration:  ", cal, " ms"]];
	];

	(*find the correct method*)
	If[!OptionValue[EPGFitFat],  
		(*2D fitting*)
		val = 2;
		t2fdic = t2fval;
		If[mon, PrintTemporary["Fitting using single Fat value: ", t2fdic]]; 

		met = OptionValue[EPGMethod];
		,
		(*3D fitting only possible with dictionaryM fitting*)
		val = 3;
		t2fdic = t2fran;

		(*find the position for the fixe t2fat value*)
		t2fval = Nearest[Range @@ t2fdic, t2fval, 1][[1]];
		t2fpos = Position[Range @@ t2fdic, t2fval, 1][[1, 1]]; 

		If[mon, PrintTemporary["Fitting using dictionary of Fat values: ", t2fdic]];
		If[mon, PrintTemporary["Initial fat value for fit: ", t2fval]]; 

		met = OptionValue[EPGMethod];
		met = If[met==="NLLS","dictionaryM",met];
	];

	(*create the dictionary*)
	If[OptionValue[EPGMethod]=!="NLLS",
		optDic = {OptionValue[EPGFatShift], OptionValue[DictT2IncludeWater], OptionValue[EPGRefocussingPhase]};
		{dict, vals} = CreateT2Dictionaryi[{T1m, T1f}, echo, angle, {t2ran, b1ran, t2fdic}, optDic ,mon];
		cons = Dimensions[vals][[;; -2]];
		dictMat = PseudoInverseC[dict];

		(*extra weight on first two echos to get correct b1*)
		wMat = ConstantArray[1., echo[[1]]]; 
		wMat[[1 ;; 3]] = echo[[1]];
		wMat = DiagonalMatrix[wMat];
		(*create the dictionary*)
		dictMatW = PseudoInverseWC[dict, wMat];

		(*make 3D dictionary 2D if needed*)
		Switch[val,
			2, 
			inp = {dict, dictMat, vals}; 
			consi = cons;
			,3, 
			(*make 2D dic vals*)
			vals2 = vals;(*t2 muscle and t2 fat*)
			vals = vals[[All, All, All, {1, 3}]];(*t2 muscle and b1*)
			consi = cons[[{1,3}]];
			inp = {dict, dictMat, vals}[[All,All,t2fpos]]; 
		];

		inpf = Flatten[#,1]&/@ inp;
	];

	(*monitor calculation*)
	i=j=0; SetSharedVariable[i]; ParallelEvaluate[j = 0];
	If[mon &&! VectorQ[datan], 
		dim = Times@@Dimensions[datal][[;;-2]];
		size = Round[dim/100];
		PrintTemporary[ProgressIndicator[Dynamic[i], {0, dim-size}]]];

	(*Perform t2 water and b1 fitting*)
	If[mon, PrintTemporary["Fitting t2 water and b1: ", DateString[]]];
	sol = Switch[met,

		(*non linear least squares not possible with fat fitting. very slow*)
		"NLLS", 
		(*define fit values*)
		valsf = {echo, {T1m, T1f, t2fdic}, angle};

		If[VectorQ[datal],
			(*single voxel*)
			NonLinearEPGFiti[{valsf, clip}, datal],
			(*monitor calculation*)
			If[mon, PrintTemporary["Starting NLLS fitting: ", DateString[]]];
			(*perform the fit using parallel kernels*)
			Map[(j++; If[j > size, i += j; j = 1;];
				NonLinearEPGFiti[{valsf, clip}, #])&, datal, {ad - 1}]
		]

		(*NealderMead  - fast for large dictionarys but unstable*)   
		,"dictionaryM", 

		If[VectorQ[datal],
			(*single voxel*)
			DictionaryMinSearchi[inp, datal, consi],
			(*monitor calculation*)
			If[mon, PrintTemporary["Starting dictionary min search (Nmin): ", DateString[]]];
			DistributeDefinitions[inp, consi, size, LeastSquaresC, LeastSquaresError2C, DictionaryMinSearchi, dicmet];
			(*perform the fit using parallel kernels*)
			ParallelMap[(j++; If[j > size, i += j; j = 1;]; 
				DictionaryMinSearchi[inp, #, consi])&, datal, {ad - 1}]
		]

		(*Brute force min search becomes slower with large dictionary*)
		,"dictionary", 

		If[VectorQ[datal],
			(*single voxel*)
			DictionaryMinSearchi[inpf, datal],
			(*monitor calculation*)
			If[mon, PrintTemporary["Starting dictionary min search (Brute): ", DateString[]]];
			DistributeDefinitions[inpf, size, LeastSquaresC, LeastSquaresErrorC, ErrorC, DictionaryMinSearchi, dicmet];
			(*perform the fit using parallel kernels*)
			ParallelMap[(j++; If[j > size, i += j; j = 1;]; 
				DictionaryMinSearchi[inpf, #])&, datal, {ad - 1}]
		]
	];

	(*restructure fit solution*)
	sol = ToPackedArray/@If[VectorQ[datal], sol, RotateDimensionsRight[sol]];

	(*Get the B1map*)
	B1Map = sol[[2]];	
	(*perform b1/T2fat smoothing if needed*)
	smoothing = (OptionValue[EPGSmoothB1] && (OptionValue[EPGMethod]=!="NLLS") && !VectorQ[datal]);
	(* check if B1map needs to be smoothed, only works for dictionary methods *)
	If[smoothing,
		If[mon, PrintTemporary["Smoothing b1 to refit with smooth b1: ", DateString[]]];
		(*smooth the b1 map*)
		B1mask = Unitize[B1Map];
		B1Map = N@Round[MedFilter[B1Map - B1mask + 1, 2] - b1ran[[1]], b1ran[[3]]] + b1ran[[1]];
		B1Map = B1mask Clip[B1Map, b1ran[[1;;2]], b1ran[[1;;2]]];
	];

	(*refit data with either smoothed b1 and/of T2fat fit*)
	If[smoothing || val==3,
		(*convert b1 values to dictionaly integers*)
		b1vals = N@Range @@ b1ran; 
		b1len = Length[b1vals];
		b1rule = Thread[b1vals -> Range[b1len]];
		B1Int = Clip[Round[B1Map /. b1rule ],{1,cons[[val]]}];

		(*monitor calculation*)
		i = 0; SetSharedVariable[i]; ParallelEvaluate[j = 0];

		(*definet fit data*)
		dataf = RotateDimensionsLeft[{datal, B1Int}];

		(*Recalculate solution*)
		sol = Switch[val,
			2,(*perfomr the brute force fit of water only*)
			If[mon, PrintTemporary["Refitting with smooth b1: ", DateString[]]];
			DistributeDefinitions[inp];
			(*only fit t2 water*)
			ParallelMap[(j++; If[j > size, i += j; j = 1;];
				{sig, b1} = #;
				DictionaryMinSearchi[inp[[All,All,b1]], sig]) &, dataf, {ad - 1}]
			,
			3,(*perfomr refit with know b1 also fitting T2fat*)
			If[mon, If[smoothing,
				PrintTemporary["Fitting t2 fat with smooth b1: ", DateString[]];,
				PrintTemporary["Fitting t2 fat with known b1: ", DateString[]];
			]];

			consi = cons[[{1,2}]];
			inp2 = {dict, dictMat, vals2};
			inp2 = (b1=#;(Flatten[#, 1] & /@ inp2[[All,All,All,b1]]))&/@Range[b1len];

			(*only fit t2 fat and water*)
			DistributeDefinitions[inp2, consi];
			ParallelMap[(j++; If[j > size, i += j; j = 1;];
				{sig, b1} = #;
				(*only update when needed*)
				(*If[Total[sig]=!=0.,inpfi = inp2[[b1]]];*)
				DictionaryMinSearchi[inp2[[b1]], sig]) &, dataf, {ad - 1}]
		];

		(*update the solution*)
		sol = RotateDimensionsRight[sol];
	];

	(*get the outputs*)
	T2map = sol[[1]];
	T2fmap = If[val==3, sol[[2]], t2fval Unitize[T2map]];
	{wat, fat} = N@{sol[[val+1]], sol[[val+2]]};
	(*shift = OptionValue[WaterFatShift];
	If[shift=!=0., 
		w = Switch[OptionValue[WaterFatShiftDirection],
			"left", {0,0,0,0,-shift,0,1,1,1,0,0,0},
			"rigth", {0,0,0,0,shift,0,1,1,1,0,0,0},
			"up", {0,0,0,0,0,-shift,1,1,1,0,0,0},
			"down", {0,0,0,0,0,shift,1,1,1,0,0,0}		
		];
		fat = Clip[DataTransformation[fat, {1,1,1}, w, InterpolationOrder -> 2],MinMax[fat]];
	];*)
	(*If[OptionValue[DictT2IncludeWater], wat = wat + .1 fat; fat = .9 fat;];*)

	fatMap = Clip[ToPackedArray@DivideNoZero[fat, (wat + fat)], {-0.1, 1.1}];
	{wat, fat} = Clip[{wat, fat}, {-0.1, 1.5} Max[datal]];

	error = ToPackedArray@Sqrt[sol[[val+3]]];

	(*if needed also output callibaration*)
	out = {{T2map, T2fmap, B1Map}, {wat, fat, fatMap}, error};

	If[OptionValue[OutputCalibration]&&OptionValue[EPGCalibrate], {out, cal[[1]]}, out]
]


(* ::Subsubsection::Closed:: *)
(*CalibrateEPGT2Fit*)


Options[CalibrateEPGT2Fit] = {
	EPGRelaxPars -> {{0, 100}, {20, 300}, {1400., 365.}}, 
	EPGFitPoints -> 50,
	EPGMethodCal -> "2compF",
	EPGFatShift -> 0.
};

SyntaxInformation[CalibrateEPGT2Fit]= {"ArgumentsPattern" -> {_, _, _, OptionsPattern[]}};

CalibrateEPGT2Fit[datan_, echoi_, angle_, OptionsPattern[]] := Block[{
		ad, nEcho, echoSpace, maskT2, dataT2, fmask, fitData, step, T2mmin, T2mmax, T2fmin, T2fmax, 
		T1m, T1f, fat, wat, cons, valsf, wcons, soli, fits, residualError, echo, shift, ang, angS
	},

	echo = If[Length[echoi]===2, echoi, {Length[echoi],First[echoi]}];
	ad = ArrayDepth[datan];

	(*Swtich between 3D and 4D data*)
	(*define thet fat mask and get the fat only signals*)
	Switch[ad, 
		3,
		(*single slice*)
		(*make mask an normalize data to first echo*)
		maskT2 = Mask[Mean[datan]];
		dataT2 = NormalizeData[maskT2 # & /@ datan];
		(*create mask selecting fat*)
		fmask = Mask[dataT2[[-1]], 50];
		fmask = ImageData[SelectComponents[Image[fmask], "Count", -2]];
		(*data for calibration fit*)
		fitData = Transpose[Flatten[GetMaskData[#, fmask]] & /@ (dataT2 + 10.^-10)] echo- 10.^-10;

		,4,

		(*mulit slice*)
		(*make mask an normalize data to first echo*)
		maskT2 = Mask[Mean[Transpose[datan]]];
		dataT2 = NormalizeData[MaskData[datan, maskT2]];
		(*create mask selecting fat*)
		fmask = Mask[NormalizeData[dataT2][[All, -1]], 50] (1 - Erosion[Mask[NormalizeData[dataT2][[All, 1]], 5, MaskSmoothing -> True], 3]);
		fmask = ImageData[SelectComponents[Image3D[fmask], "Count", -2]];
		(*data for calibration fit*)
		fitData = Transpose[Flatten[GetMaskData[#, fmask]] & /@ Transpose[dataT2 + 10.^-10]] - 10.^-10;
	];

	(*select random fit points to calibrate fat signal and get the boundries*)
	step = Ceiling[Length[fitData]/OptionValue[EPGFitPoints]];
	fitData = fitData[[ ;; ;; step]];
	{{T2mmin, T2mmax}, {T2fmin, T2fmax}, {T1m, T1f}} = OptionValue[EPGRelaxPars];

	err = If[Length[fitData]<5, True; Print["error: not enough data points for calibration!"], False];

	(*shift the slice profile*)	
	shift = OptionValue[EPGFatShift];
	If[shift > 0,
		{ang, angS} = ShiftPulseProfile[angle,shift],
		ang = angS = angle
		];

	(*Distribute for the parallel evaluation*)
	DistributeDefinitions[ErrorFunc1F, ErrorFunc2MF, ErrorFunc2F, ErrorFunc2MFS, ErrorFunc2FS, 
		LeastSquaresErrorC, EPGSignali, MixMatrix, MakeDiagMat, RotMatrixT, RotMatrixTI, MoveStates, MoveStatesI];

	(*perform the fitting*)
	Switch[OptionValue[EPGMethodCal],
		"1comp", (*only fit single fat compartment*)
		valsf = {echo, T1f, angS};
		DistributeDefinitions[valsf];

		fits = ParallelMap[(
			s0 = #[[1]];
			{residualError, soli} = Quiet@FindMinimum[{
				ErrorFunc1F[#, T2fi, B1i, S0i, valsf],
				{0.5 <= B1i <= 1.5, 20. <= T2fi <= 300., 0 < S0i}
				}, {{T2fi, 50.}, {B1i, 1}, {S0i, 5 s0}}, MaxIterations -> 25];
			out = {T2fif, B1if, S0if} = soli[[All, 2]];
			out
			) &, fitData];

		,"2comp", (*fit both water and fat compartment*)
		valsf = {echo, {T1m, T1f}, ang, angS};
		DistributeDefinitions[valsf];

		fits = ParallelMap[(
			{residualError, soli} = Quiet@FindMinimum[{
				ErrorFunc2MFS[#, T2mi, T2fi, B1i, valsf],
				{0.5 <= B1i <= 1.5, 10 <= T2mi <= 50., 100 <= T2fi <= 300.}
				}, {{T2mi, 20.}, {T2fi, 150.}, {B1i, 1}}, MaxIterations -> 25];
			out = {T2mif, T2fif, B1if} = soli[[All, 2]];
			out
			) &, fitData];

		,"2compF", (*fit only fat compartment but include water with fixed t2*)
		valsf = {echo, {T1m, 20, T1f}, ang, angS};
		DistributeDefinitions[valsf, fun];

		fits = ParallelMap[(
			{residualError, soli} = Quiet@FindMinimum[{
				ErrorFunc2FS[#, T2fi, B1i, valsf],
				{0.5 <= B1i <= 1.5, 100 <= T2fi <= 300.}
				}, {{T2fi, 150.}, {B1i, 1}}, MaxIterations -> 25];
			out = {T2fif, B1if} = soli[[All, 2]];
			out
			) &, fitData];
		];

	(*iff error return default*)
	out = If[err,
		Switch[OptionValue[EPGMethodCal],
			"1comp", {{150, 1, 1}, {0, 0, 0}},
			"2comp", {{20, 150, 1}, {0, 0, 0}},
			"2compF", {{150, 1}, {0, 0}}
		]
		,
		(*get the values*)
		{Median[fits], StandardDeviation[fits]}
	];

	out
]


(* ::Subsubsection::Closed:: *)
(*CreateT2Dictionary*)


Options[CreateT2Dictionary] = {
	DictB1Range -> {0.5, 1.4, 0.01}, 
	DictT2Range -> {10., 70., 0.2}, 
	DictT2fRange -> {100., 200., 2.},

	DictT2IncludeWater->False, 
	EPGFatShift -> 0.,
	MonitorCalc ->True,
	EPGRefocussingPhase -> 0.
};

SyntaxInformation[CreateT2Dictionary]= {"ArgumentsPattern" -> {_, _, _, OptionsPattern[]}};

CreateT2Dictionary[relax_, echo_, ang_, OptionsPattern[]] := CreateT2Dictionaryi[relax, echo, ang, 
	{OptionValue[DictT2Range], OptionValue[DictB1Range], OptionValue[DictT2fRange]}, 
	{OptionValue[EPGFatShift], OptionValue[DictT2IncludeWater], OptionValue[EPGRefocussingPhase]}, 
	OptionValue[MonitorCalc]
]

(*save each unique dictionary*)
CreateT2Dictionaryi[relax_, echo_, angle_, {t2range_, b1range_, t2frange_}, {shift_, incW_, phase_}, mon_] := 
CreateT2Dictionaryi[relax, echo, angle, {t2range, b1range, t2frange}, {shift, incW, phase}, mon] = Block[{
		T1m, T1f, t2Mvals, t2Mlen, b1vals, b1len, t2val, t2Fvals, t2Flen, time, fatSig, watSig, 
		dict, vals, fatSigW, ang, angS
	},

	(*set parameters*)
	{T1m, T1f} = N@relax;
	(*get dictionary values*)
	t2Mvals = N@Range @@ t2range;
	t2Mlen = Length[t2Mvals];
	b1vals = N@Range @@ b1range;
	b1len = Length[b1vals];

	(*check in number or range*)
	If[NumberQ[t2frange],
		t2val = t2frange;
		,
		t2Fvals = N@Range @@ t2frange;
		t2Flen = Length[t2Fvals];
	];

	(*shift the slice profile of fat*)
	If[shift > 0,
		{ang, angS} = ShiftPulseProfile[angle,shift],
		ang = angS = angle
	];

	(*distribute the needed functions for parrallel evaluation*)
	DistributeDefinitions[
		EPGSignali, MixMatrix, MakeDiagMat, RotMatrixT, 
		RotMatrixTI, MoveStates, MoveStatesI,
		echo, T1m, ang, angS, T1f, b1vals, t2Mvals, t2Fvals, t2val
	];

	(*create the dictionary signals*)
	If[NumberQ[t2frange],

		(*2D dictionary*)
		If[mon, PrintTemporary["Creating new dictionary with fixed t2 fat value"]];

		(*fixed t2 value*)
		time = AbsoluteTiming[
			watSig = ParallelTable[EPGSignali[echo, {T1m, t2m}, ang, b1, {0, phase}], {b1, b1vals}, {t2m, t2Mvals}];
			fatSig = ParallelTable[EPGSignali[echo, {T1f, t2val}, angS, b1, {0, phase}], {b1, b1vals}];

			If[incW,
				fatSigW = ParallelTable[EPGSignali[echo, {T1f, 20}, ang, b1, {0, phase}], {b1, b1vals}];
				fatSig = 0.1 fatSigW + 0.9 fatSig
			];

			dict = Table[Transpose@{watSig[[b1i, t2mi]], fatSig[[b1i]]}, {t2mi, 1, t2Mlen}, {b1i, 1, b1len}];
			vals = Table[{t2m, b1}, {t2m, t2Mvals}, {b1, b1vals}];
		][[1]];

		If[mon, Print["The dictionary contains "<>ToString[Times @@ Dimensions[dict][[;; -3]]]<>" values, with T2fat = "<>
			ToString[Round[t2val]]<>" ms, and took "<>ToString[Round[time, .1]]<>" seconds to generate."]];

		,
		(*3D dictionary*)
		If[mon, PrintTemporary["Creating new dictionary with range of t2 fat values"]];
		(*range of t2 values*)
		time = AbsoluteTiming[
			watSig = ParallelTable[EPGSignali[echo, {T1m, t2m}, ang, b1, {0, phase}], {b1, b1vals}, {t2m, t2Mvals}];
			fatSig = ParallelTable[EPGSignali[echo, {T1f, t2f}, angS, b1, {0, phase}], {b1, b1vals}, {t2f, t2Fvals}];

			If[incW,
				fatSigW = ParallelTable[EPGSignali[echo, {T1f, 20}, ang, b1, {0, phase}], {b1, b1vals}];
				fatSigW = Transpose@ConstantArray[fatSigW, Length[t2Fvals]];
				fatSig = 0.1 fatSigW + 0.9 fatSig
			];

			dict = Table[Transpose@{watSig[[b1i, t2mi]], fatSig[[b1i, t2fi]]}, 
				{t2mi, 1, t2Mlen}, {t2fi, 1, t2Flen}, {b1i, 1, b1len}];
			vals = Table[{t2m, t2f, b1}, {t2m, t2Mvals}, {t2f, t2Fvals}, {b1, b1vals}];
		][[1]];

		If[mon, Print["The dictionary contains "<>ToString[Times @@ Dimensions[dict][[;; -3]]]<>
			" values, and took "<> ToString[Round[time, .1]]<>" seconds to generate."]];
	];

	(*output*)
	{ToPackedArray[N@dict], ToPackedArray[N@vals]}
]


(* ::Section:: *)
(*End Package*)


End[]

EndPackage[]
